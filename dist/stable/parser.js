'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hookBabylon = hookBabylon;

var _babylon = require('babylon');

var babylon = _interopRequireWildcard(_babylon);

var _offside_ops = require('./offside_ops');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const tt = babylon.tokTypes;

var _g_offsidePluginOpts;

const _base_module_parse = babylon.parse;
babylon.parse = (input, options) => {
  _g_offsidePluginOpts = options ? options.offsidePluginOpts : undefined;
  return _base_module_parse(input, options);
};

const Parser = hookBabylon();
const baseProto = Parser.prototype;
const pp = Parser.prototype = Object.create(baseProto);

function hookBabylon() {
  // abuse Babylon token updateContext callback extract
  // the reference to Parser

  let Parser;
  const tgt_patch = tt.braceL;
  const fn_updateContext = tgt_patch.updateContext;
  tgt_patch.updateContext = function (prevType) {
    tgt_patch.updateContext = fn_updateContext;
    Parser = this.constructor;
  };

  babylon.parse('{}');
  if (!Parser) {
    throw new Error("Failed to hook Babylon Parser");
  }
  return Parser;
}

pp._base_parse = baseProto.parse;
pp.parse = function () {
  this.initOffside();
  return this._base_parse();
};

class OffsideBreakout extends Error {}
const offsideBreakout = new OffsideBreakout();

pp.initOffside = function () {
  this.state.offside = [];
  this.state.offsideNextOp = null;
  this.offside_lines = (0, _offside_ops.parseOffsideIndexMap)(this.input);
  this.offsidePluginOpts = _g_offsidePluginOpts || {};
  _g_offsidePluginOpts = null;

  this.state._pos = this.state.pos;
  Object.defineProperty(this.state, 'pos', { enumerable: true,
    get() {
      return this._pos;
    }, set(pos) {
      // interrupt skipSpace algorithm when we hit our position 'breakpoint'
      const offPos = this.offsidePos;
      if (offPos >= 0 && pos > offPos) {
        throw offsideBreakout;
      }

      this._pos = pos;
    } });
};

const tt_offside_keyword_with_args = new Set([tt._if, tt._while, tt._for, tt._catch, tt._switch]);

const tt_offside_keyword_lookahead_skip = new Set([tt.parenL, tt.colon, tt.comma, tt.dot]);

pp.isForAwait = function (keywordType, type, val) {
  return tt._for === keywordType && tt.name === type && 'await' === val;
};

const rx_offside_op = /(\S+)[ \t]*(\r\n|\r|\n)?/;

pp._base_finishToken = baseProto.finishToken;
pp.finishToken = function (type, val) {
  const state = this.state;
  const recentKeyword = state.offsideRecentKeyword;
  const inForAwait = recentKeyword ? this.isForAwait(recentKeyword, type, val) : null;
  state.offsideRecentKeyword = null;

  if (tt_offside_keyword_with_args.has(type) || inForAwait) {
    const isKeywordAllowed = !this.isLookahead && tt.dot !== state.type;

    if (!isKeywordAllowed) {
      return this._base_finishToken(type, val);
    }

    state.offsideRecentKeyword = inForAwait ? tt._for : type;
    const lookahead = this.lookahead();

    if (tt_offside_keyword_lookahead_skip.has(lookahead.type)) {} else if (this.isForAwait(type, lookahead.type, lookahead.value)) {} else {
      state.offsideNextOp = _offside_ops.at_offside.keyword_args;
    }

    return this._base_finishToken(type, val);
  }

  if (type === tt.at || type === tt.doubleColon) {
    const pos0 = state.start,
          pos1 = state.pos + 2;
    const m_op = rx_offside_op.exec(this.input.slice(pos0));
    const str_op = m_op[1];
    const lineEndsWithOp = !!m_op[2];

    let op = _offside_ops.at_offside[str_op];
    if (op) {
      if (op.keywordBlock && recentKeyword && tt_offside_keyword_with_args.has(recentKeyword)) {
        op = _offside_ops.at_offside.keyword_args;
      } else if (lineEndsWithOp && op.nestInner) {
        // all offside operators at the end of a line implicitly don't nestInner
        op = { __proto__: op, nestInner: false };
      }

      this.finishOffsideOp(op, op.extraChars);

      if (op.nestOp) {
        state.offsideNextOp = _offside_ops.at_offside[op.nestOp];
      }
      return;
    }
  }

  if (tt.eof === type) {
    if (state.offside.length) {
      return this.popOffside();
    }
  }

  return this._base_finishToken(type, val);
};

pp.offsideIndent = function (line0, outerIndent, innerIndent) {
  const offside_lines = this.offside_lines;

  if (null == innerIndent) {
    const innerLine = offside_lines[line0 + 1];
    innerIndent = innerLine ? innerLine.indent : '';
  }

  let line = line0 + 1,
      last = offside_lines[line0];
  while (line < offside_lines.length) {
    const cur = offside_lines[line];
    if (cur.content && outerIndent >= cur.indent) {
      line--; // backup to previous line
      break;
    }

    line++;last = cur;
    if (innerIndent > cur.indent) {
      innerIndent = cur.indent;
    }
  }

  return { line, last, innerIndent };
};

pp.offsideBlock = function (op, stackTop, recentKeywordTop) {
  const state = this.state;
  const line0 = state.curLine;
  const first = this.offside_lines[line0];

  let indent, keywordNestedIndent;
  if (recentKeywordTop) {
    indent = recentKeywordTop.first.indent;
  } else if (op.nestInner && stackTop && line0 === stackTop.first.line) {
    indent = stackTop.innerIndent;
  } else if (op.inKeywordArg) {
    indent = first.indent;
    const indent_block = this.offsideIndent(line0, indent);
    const indent_keyword = this.offsideIndent(line0, indent_block.innerIndent);
    if (indent_keyword.innerIndent > indent_block.innerIndent) {
      // autodetect keyword argument using '@' for function calls
      indent = indent_block.innerIndent;
      keywordNestedIndent = indent_keyword.innerIndent;
    }
  } else {
    indent = first.indent;
  }

  let { last, innerIndent } = this.offsideIndent(line0, indent, keywordNestedIndent);

  // cap to 
  innerIndent = first.indent > innerIndent ? first.indent : innerIndent;

  if (stackTop && stackTop.last.posLastContent < last.posLastContent) {
    // Fixup enclosing scopes. Happens in situations like: `server.on @ wraper @ (...args) => ::`
    const stack = state.offside;
    for (let idx = stack.length - 1; idx > 0; idx--) {
      let tip = stack[idx];
      if (tip.last.posLastContent >= last.posLastContent) {
        break;
      }
      tip.last = last;
    }
  }

  return { op, innerIndent, first, last,
    start: state.start, end: state.end,
    loc: { start: state.startLoc, end: state.endLoc } };
};

pp.finishOffsideOp = function (op, extraChars) {
  const stack = this.state.offside;
  let stackTop = stack[stack.length - 1];
  let recentKeywordTop;
  if (op.codeBlock) {
    if (stackTop && stackTop.inKeywordArg) {
      // We're at the end of an offside keyword block; restore enclosing ()
      this.popOffside();
      this.state.offsideNextOp = op;
      this.state.offsideRecentTop = stackTop;
      return;
    }

    recentKeywordTop = this.state.offsideRecentTop;
    this.state.offsideRecentTop = null;
  }

  if (extraChars) {
    this.state.pos += extraChars;
  }

  this._base_finishToken(op.tokenPre);

  if (this.isLookahead) {
    return;
  }

  stackTop = stack[stack.length - 1];
  const blk = this.offsideBlock(op, stackTop, recentKeywordTop);
  blk.inKeywordArg = op.inKeywordArg || stackTop && stackTop.inKeywordArg;
  this.state.offside.push(blk);
};

pp._base_skipSpace = baseProto.skipSpace;
pp.skipSpace = function () {
  const state = this.state;
  if (null !== state.offsideNextOp) {
    return;
  }

  const stack = state.offside;
  let stackTop;
  if (stack && stack.length) {
    stackTop = stack[stack.length - 1];
    state.offsidePos = stackTop.last.posLastContent;
  } else {
    state.offsidePos = -1;
  }

  try {
    this._base_skipSpace();
    state.offsidePos = -1;

    state.offsideImplicitComma = undefined !== stackTop ? this.offsideCheckImplicitComma(stackTop) : null;
  } catch (err) {
    if (err !== offsideBreakout) {
      throw err;
    }
  }
};

const tt_offside_disrupt_implicit_comma = new Set([tt.comma, tt.dot, tt.arrow]);

pp.offsideCheckImplicitComma = function (stackTop) {
  if (!stackTop.op.implicitCommas || !this.offsidePluginOpts.implicit_commas) {
    return null; // not enabled for this offside op
  }const state = this.state,
        state_type = state.type,
        column = state.pos - state.lineStart;
  if (column !== stackTop.innerIndent.length) {
    return null; // not at the exact right indent
  }if (stackTop.end >= state.end) {
    return false; // no comma before the first element
  }if (tt.comma === state_type) {
    return false; // there's an explicit comma already present
  }if (state_type.binop || state_type.beforeExpr) {
    return false; // there's an operator or arrow function preceeding this line
  }if (this.isLookahead) {
    return false; // disallow recursive lookahead
  }const { type: next_type } = this.lookahead();
  if (tt_offside_disrupt_implicit_comma.has(next_type) || next_type.binop) {
    return false; // there's a comma, dot, operator, or other token that precludes an implicit leading comma
  }return true; // an implicit comma is needed
};pp._base_readToken = baseProto.readToken;
pp.readToken = function (code) {
  const state = this.state;

  if (state.offsideImplicitComma) {
    return this._base_finishToken(tt.comma);
  }

  const offsideNextOp = state.offsideNextOp;
  if (null !== offsideNextOp) {
    state.offsideNextOp = null;
    return this.finishOffsideOp(offsideNextOp);
  }

  if (state.pos === state.offsidePos) {
    return this.popOffside();
  }

  return this._base_readToken(code);
};

pp.popOffside = function () {
  const stack = this.state.offside;
  const stackTop = this.isLookahead ? stack[stack.length - 1] : stack.pop();
  this.state.offsidePos = -1;

  this._base_finishToken(stackTop.op.tokenPost);
  return stackTop;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvZGUvcGFyc2VyLmpzIl0sIm5hbWVzIjpbImhvb2tCYWJ5bG9uIiwiYmFieWxvbiIsInR0IiwidG9rVHlwZXMiLCJfZ19vZmZzaWRlUGx1Z2luT3B0cyIsIl9iYXNlX21vZHVsZV9wYXJzZSIsInBhcnNlIiwiaW5wdXQiLCJvcHRpb25zIiwib2Zmc2lkZVBsdWdpbk9wdHMiLCJ1bmRlZmluZWQiLCJQYXJzZXIiLCJiYXNlUHJvdG8iLCJwcm90b3R5cGUiLCJwcCIsIk9iamVjdCIsImNyZWF0ZSIsInRndF9wYXRjaCIsImJyYWNlTCIsImZuX3VwZGF0ZUNvbnRleHQiLCJ1cGRhdGVDb250ZXh0IiwicHJldlR5cGUiLCJjb25zdHJ1Y3RvciIsIkVycm9yIiwiX2Jhc2VfcGFyc2UiLCJpbml0T2Zmc2lkZSIsIk9mZnNpZGVCcmVha291dCIsIm9mZnNpZGVCcmVha291dCIsInN0YXRlIiwib2Zmc2lkZSIsIm9mZnNpZGVOZXh0T3AiLCJvZmZzaWRlX2xpbmVzIiwiX3BvcyIsInBvcyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInNldCIsIm9mZlBvcyIsIm9mZnNpZGVQb3MiLCJ0dF9vZmZzaWRlX2tleXdvcmRfd2l0aF9hcmdzIiwiU2V0IiwiX2lmIiwiX3doaWxlIiwiX2ZvciIsIl9jYXRjaCIsIl9zd2l0Y2giLCJ0dF9vZmZzaWRlX2tleXdvcmRfbG9va2FoZWFkX3NraXAiLCJwYXJlbkwiLCJjb2xvbiIsImNvbW1hIiwiZG90IiwiaXNGb3JBd2FpdCIsImtleXdvcmRUeXBlIiwidHlwZSIsInZhbCIsIm5hbWUiLCJyeF9vZmZzaWRlX29wIiwiX2Jhc2VfZmluaXNoVG9rZW4iLCJmaW5pc2hUb2tlbiIsInJlY2VudEtleXdvcmQiLCJvZmZzaWRlUmVjZW50S2V5d29yZCIsImluRm9yQXdhaXQiLCJoYXMiLCJpc0tleXdvcmRBbGxvd2VkIiwiaXNMb29rYWhlYWQiLCJsb29rYWhlYWQiLCJ2YWx1ZSIsImtleXdvcmRfYXJncyIsImF0IiwiZG91YmxlQ29sb24iLCJwb3MwIiwic3RhcnQiLCJwb3MxIiwibV9vcCIsImV4ZWMiLCJzbGljZSIsInN0cl9vcCIsImxpbmVFbmRzV2l0aE9wIiwib3AiLCJrZXl3b3JkQmxvY2siLCJuZXN0SW5uZXIiLCJfX3Byb3RvX18iLCJmaW5pc2hPZmZzaWRlT3AiLCJleHRyYUNoYXJzIiwibmVzdE9wIiwiZW9mIiwibGVuZ3RoIiwicG9wT2Zmc2lkZSIsIm9mZnNpZGVJbmRlbnQiLCJsaW5lMCIsIm91dGVySW5kZW50IiwiaW5uZXJJbmRlbnQiLCJpbm5lckxpbmUiLCJpbmRlbnQiLCJsaW5lIiwibGFzdCIsImN1ciIsImNvbnRlbnQiLCJvZmZzaWRlQmxvY2siLCJzdGFja1RvcCIsInJlY2VudEtleXdvcmRUb3AiLCJjdXJMaW5lIiwiZmlyc3QiLCJrZXl3b3JkTmVzdGVkSW5kZW50IiwiaW5LZXl3b3JkQXJnIiwiaW5kZW50X2Jsb2NrIiwiaW5kZW50X2tleXdvcmQiLCJwb3NMYXN0Q29udGVudCIsInN0YWNrIiwiaWR4IiwidGlwIiwiZW5kIiwibG9jIiwic3RhcnRMb2MiLCJlbmRMb2MiLCJjb2RlQmxvY2siLCJvZmZzaWRlUmVjZW50VG9wIiwidG9rZW5QcmUiLCJibGsiLCJwdXNoIiwiX2Jhc2Vfc2tpcFNwYWNlIiwic2tpcFNwYWNlIiwib2Zmc2lkZUltcGxpY2l0Q29tbWEiLCJvZmZzaWRlQ2hlY2tJbXBsaWNpdENvbW1hIiwiZXJyIiwidHRfb2Zmc2lkZV9kaXNydXB0X2ltcGxpY2l0X2NvbW1hIiwiYXJyb3ciLCJpbXBsaWNpdENvbW1hcyIsImltcGxpY2l0X2NvbW1hcyIsInN0YXRlX3R5cGUiLCJjb2x1bW4iLCJsaW5lU3RhcnQiLCJiaW5vcCIsImJlZm9yZUV4cHIiLCJuZXh0X3R5cGUiLCJfYmFzZV9yZWFkVG9rZW4iLCJyZWFkVG9rZW4iLCJjb2RlIiwicG9wIiwidG9rZW5Qb3N0Il0sIm1hcHBpbmdzIjoiOzs7OztRQWdCZ0JBLFcsR0FBQUEsVzs7QUFoQmhCOztJQUFZ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ZW50IjpbImltcG9ydCAqIGFzIGJhYnlsb24gZnJvbSAnYmFieWxvbidcbmNvbnN0IHR0ID0gYmFieWxvbi50b2tUeXBlc1xuXG5pbXBvcnQge2F0X29mZnNpZGUsIHBhcnNlT2Zmc2lkZUluZGV4TWFwfSBmcm9tICcuL29mZnNpZGVfb3BzJ1xuXG52YXIgX2dfb2Zmc2lkZVBsdWdpbk9wdHNcblxuY29uc3QgX2Jhc2VfbW9kdWxlX3BhcnNlID0gYmFieWxvbi5wYXJzZVxuYmFieWxvbi5wYXJzZSA9IChpbnB1dCwgb3B0aW9ucykgPT4gOjpcbiAgX2dfb2Zmc2lkZVBsdWdpbk9wdHMgPSBvcHRpb25zID8gb3B0aW9ucy5vZmZzaWRlUGx1Z2luT3B0cyA6IHVuZGVmaW5lZFxuICByZXR1cm4gX2Jhc2VfbW9kdWxlX3BhcnNlKGlucHV0LCBvcHRpb25zKVxuXG5jb25zdCBQYXJzZXIgPSBob29rQmFieWxvbigpXG5jb25zdCBiYXNlUHJvdG8gPSBQYXJzZXIucHJvdG90eXBlXG5jb25zdCBwcCA9IFBhcnNlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGJhc2VQcm90bylcblxuZXhwb3J0IGZ1bmN0aW9uIGhvb2tCYWJ5bG9uKCkgOjpcbiAgLy8gYWJ1c2UgQmFieWxvbiB0b2tlbiB1cGRhdGVDb250ZXh0IGNhbGxiYWNrIGV4dHJhY3RcbiAgLy8gdGhlIHJlZmVyZW5jZSB0byBQYXJzZXJcblxuICBsZXQgUGFyc2VyXG4gIGNvbnN0IHRndF9wYXRjaCA9IHR0LmJyYWNlTFxuICBjb25zdCBmbl91cGRhdGVDb250ZXh0ID0gdGd0X3BhdGNoLnVwZGF0ZUNvbnRleHRcbiAgdGd0X3BhdGNoLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbiAocHJldlR5cGUpIDo6XG4gICAgdGd0X3BhdGNoLnVwZGF0ZUNvbnRleHQgPSBmbl91cGRhdGVDb250ZXh0XG4gICAgUGFyc2VyID0gdGhpcy5jb25zdHJ1Y3RvclxuXG4gIGJhYnlsb24ucGFyc2UoJ3t9JylcbiAgaWYgISBQYXJzZXIgOjpcbiAgICB0aHJvdyBuZXcgRXJyb3IgQCBcIkZhaWxlZCB0byBob29rIEJhYnlsb24gUGFyc2VyXCJcbiAgcmV0dXJuIFBhcnNlclxuXG5cbnBwLl9iYXNlX3BhcnNlID0gYmFzZVByb3RvLnBhcnNlXG5wcC5wYXJzZSA9IGZ1bmN0aW9uKCkgOjpcbiAgdGhpcy5pbml0T2Zmc2lkZSgpXG4gIHJldHVybiB0aGlzLl9iYXNlX3BhcnNlKClcblxuXG5jbGFzcyBPZmZzaWRlQnJlYWtvdXQgZXh0ZW5kcyBFcnJvciB7fVxuY29uc3Qgb2Zmc2lkZUJyZWFrb3V0ID0gbmV3IE9mZnNpZGVCcmVha291dCgpXG5cbnBwLmluaXRPZmZzaWRlID0gZnVuY3Rpb24oKSA6OlxuICB0aGlzLnN0YXRlLm9mZnNpZGUgPSBbXVxuICB0aGlzLnN0YXRlLm9mZnNpZGVOZXh0T3AgPSBudWxsXG4gIHRoaXMub2Zmc2lkZV9saW5lcyA9IHBhcnNlT2Zmc2lkZUluZGV4TWFwKHRoaXMuaW5wdXQpXG4gIHRoaXMub2Zmc2lkZVBsdWdpbk9wdHMgPSBfZ19vZmZzaWRlUGx1Z2luT3B0cyB8fCB7fVxuICBfZ19vZmZzaWRlUGx1Z2luT3B0cyA9IG51bGxcblxuICB0aGlzLnN0YXRlLl9wb3MgPSB0aGlzLnN0YXRlLnBvc1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkgQCB0aGlzLnN0YXRlLCAncG9zJyxcbiAgICBAe30gZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgLCBnZXQoKSA6OiByZXR1cm4gdGhpcy5fcG9zXG4gICAgICAsIHNldChwb3MpIDo6XG4gICAgICAgICAgLy8gaW50ZXJydXB0IHNraXBTcGFjZSBhbGdvcml0aG0gd2hlbiB3ZSBoaXQgb3VyIHBvc2l0aW9uICdicmVha3BvaW50J1xuICAgICAgICAgIGNvbnN0IG9mZlBvcyA9IHRoaXMub2Zmc2lkZVBvc1xuICAgICAgICAgIGlmIG9mZlBvcz49MCAmJiAocG9zID4gb2ZmUG9zKSA6OlxuICAgICAgICAgICAgdGhyb3cgb2Zmc2lkZUJyZWFrb3V0XG5cbiAgICAgICAgICB0aGlzLl9wb3MgPSBwb3NcblxuXG5jb25zdCB0dF9vZmZzaWRlX2tleXdvcmRfd2l0aF9hcmdzID0gbmV3IFNldCBAI1xuICAgICAgdHQuX2lmLCB0dC5fd2hpbGUsIHR0Ll9mb3JcbiAgICAsIHR0Ll9jYXRjaCwgdHQuX3N3aXRjaFxuXG5jb25zdCB0dF9vZmZzaWRlX2tleXdvcmRfbG9va2FoZWFkX3NraXAgPSBuZXcgU2V0IEAjXG4gICAgICB0dC5wYXJlbkwsIHR0LmNvbG9uLCB0dC5jb21tYSwgdHQuZG90XG5cbnBwLmlzRm9yQXdhaXQgPSBmdW5jdGlvbiAoa2V5d29yZFR5cGUsIHR5cGUsIHZhbCkgOjpcbiAgcmV0dXJuIHR0Ll9mb3IgPT09IGtleXdvcmRUeXBlXG4gICAgJiYgdHQubmFtZSA9PT0gdHlwZVxuICAgICYmICdhd2FpdCcgPT09IHZhbFxuXG5jb25zdCByeF9vZmZzaWRlX29wID0gLyhcXFMrKVsgXFx0XSooXFxyXFxufFxccnxcXG4pPy9cblxucHAuX2Jhc2VfZmluaXNoVG9rZW4gPSBiYXNlUHJvdG8uZmluaXNoVG9rZW5cbnBwLmZpbmlzaFRva2VuID0gZnVuY3Rpb24odHlwZSwgdmFsKSA6OlxuICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGVcbiAgY29uc3QgcmVjZW50S2V5d29yZCA9IHN0YXRlLm9mZnNpZGVSZWNlbnRLZXl3b3JkXG4gIGNvbnN0IGluRm9yQXdhaXQgPSByZWNlbnRLZXl3b3JkID8gdGhpcy5pc0ZvckF3YWl0KHJlY2VudEtleXdvcmQsIHR5cGUsIHZhbCkgOiBudWxsXG4gIHN0YXRlLm9mZnNpZGVSZWNlbnRLZXl3b3JkID0gbnVsbFxuXG4gIGlmIHR0X29mZnNpZGVfa2V5d29yZF93aXRoX2FyZ3MuaGFzKHR5cGUpIHx8IGluRm9yQXdhaXQgOjpcbiAgICBjb25zdCBpc0tleXdvcmRBbGxvd2VkID0gIXRoaXMuaXNMb29rYWhlYWRcbiAgICAgICYmIHR0LmRvdCAhPT0gc3RhdGUudHlwZVxuXG4gICAgaWYgIWlzS2V5d29yZEFsbG93ZWQgOjpcbiAgICAgIHJldHVybiB0aGlzLl9iYXNlX2ZpbmlzaFRva2VuKHR5cGUsIHZhbClcblxuICAgIHN0YXRlLm9mZnNpZGVSZWNlbnRLZXl3b3JkID0gaW5Gb3JBd2FpdCA/IHR0Ll9mb3IgOiB0eXBlXG4gICAgY29uc3QgbG9va2FoZWFkID0gdGhpcy5sb29rYWhlYWQoKVxuXG4gICAgaWYgdHRfb2Zmc2lkZV9rZXl3b3JkX2xvb2thaGVhZF9za2lwLmhhcyhsb29rYWhlYWQudHlwZSkgOjpcbiAgICBlbHNlIGlmIHRoaXMuaXNGb3JBd2FpdCh0eXBlLCBsb29rYWhlYWQudHlwZSwgbG9va2FoZWFkLnZhbHVlKSA6OlxuICAgIGVsc2UgOjpcbiAgICAgIHN0YXRlLm9mZnNpZGVOZXh0T3AgPSBhdF9vZmZzaWRlLmtleXdvcmRfYXJnc1xuXG4gICAgcmV0dXJuIHRoaXMuX2Jhc2VfZmluaXNoVG9rZW4odHlwZSwgdmFsKVxuXG4gIGlmIHR5cGUgPT09IHR0LmF0IHx8IHR5cGUgPT09IHR0LmRvdWJsZUNvbG9uIDo6XG4gICAgY29uc3QgcG9zMCA9IHN0YXRlLnN0YXJ0LCBwb3MxID0gc3RhdGUucG9zICsgMlxuICAgIGNvbnN0IG1fb3AgPSByeF9vZmZzaWRlX29wLmV4ZWMgQCB0aGlzLmlucHV0LnNsaWNlKHBvczApXG4gICAgY29uc3Qgc3RyX29wID0gbV9vcFsxXVxuICAgIGNvbnN0IGxpbmVFbmRzV2l0aE9wID0gISEgbV9vcFsyXVxuXG4gICAgbGV0IG9wID0gYXRfb2Zmc2lkZVtzdHJfb3BdXG4gICAgaWYgb3AgOjpcbiAgICAgIGlmIG9wLmtleXdvcmRCbG9jayAmJiByZWNlbnRLZXl3b3JkICYmIHR0X29mZnNpZGVfa2V5d29yZF93aXRoX2FyZ3MuaGFzKHJlY2VudEtleXdvcmQpIDo6XG4gICAgICAgIG9wID0gYXRfb2Zmc2lkZS5rZXl3b3JkX2FyZ3NcblxuICAgICAgZWxzZSBpZiBsaW5lRW5kc1dpdGhPcCAmJiBvcC5uZXN0SW5uZXI6OlxuICAgICAgICAvLyBhbGwgb2Zmc2lkZSBvcGVyYXRvcnMgYXQgdGhlIGVuZCBvZiBhIGxpbmUgaW1wbGljaXRseSBkb24ndCBuZXN0SW5uZXJcbiAgICAgICAgb3AgPSBAe30gX19wcm90b19fOiBvcCwgbmVzdElubmVyOiBmYWxzZVxuXG4gICAgICB0aGlzLmZpbmlzaE9mZnNpZGVPcChvcCwgb3AuZXh0cmFDaGFycylcblxuICAgICAgaWYgb3AubmVzdE9wIDo6XG4gICAgICAgIHN0YXRlLm9mZnNpZGVOZXh0T3AgPSBhdF9vZmZzaWRlW29wLm5lc3RPcF1cbiAgICAgIHJldHVyblxuXG4gIGlmIHR0LmVvZiA9PT0gdHlwZSA6OlxuICAgIGlmIHN0YXRlLm9mZnNpZGUubGVuZ3RoIDo6XG4gICAgICByZXR1cm4gdGhpcy5wb3BPZmZzaWRlKClcblxuICByZXR1cm4gdGhpcy5fYmFzZV9maW5pc2hUb2tlbih0eXBlLCB2YWwpXG5cblxucHAub2Zmc2lkZUluZGVudCA9IGZ1bmN0aW9uIChsaW5lMCwgb3V0ZXJJbmRlbnQsIGlubmVySW5kZW50KSA6OlxuICBjb25zdCBvZmZzaWRlX2xpbmVzID0gdGhpcy5vZmZzaWRlX2xpbmVzXG5cbiAgaWYgbnVsbCA9PSBpbm5lckluZGVudCA6OlxuICAgIGNvbnN0IGlubmVyTGluZSA9IG9mZnNpZGVfbGluZXNbbGluZTArMV1cbiAgICBpbm5lckluZGVudCA9IGlubmVyTGluZSA/IGlubmVyTGluZS5pbmRlbnQgOiAnJ1xuXG4gIGxldCBsaW5lPWxpbmUwKzEsIGxhc3Q9b2Zmc2lkZV9saW5lc1tsaW5lMF1cbiAgd2hpbGUgbGluZSA8IG9mZnNpZGVfbGluZXMubGVuZ3RoIDo6XG4gICAgY29uc3QgY3VyID0gb2Zmc2lkZV9saW5lc1tsaW5lXVxuICAgIGlmIGN1ci5jb250ZW50ICYmIG91dGVySW5kZW50ID49IGN1ci5pbmRlbnQgOjpcbiAgICAgIGxpbmUtLSAvLyBiYWNrdXAgdG8gcHJldmlvdXMgbGluZVxuICAgICAgYnJlYWtcblxuICAgIGxpbmUrKzsgbGFzdCA9IGN1clxuICAgIGlmIGlubmVySW5kZW50ID4gY3VyLmluZGVudCA6OlxuICAgICAgaW5uZXJJbmRlbnQgPSBjdXIuaW5kZW50XG5cbiAgcmV0dXJuIEB7fSBsaW5lLCBsYXN0LCBpbm5lckluZGVudFxuXG5cbnBwLm9mZnNpZGVCbG9jayA9IGZ1bmN0aW9uIChvcCwgc3RhY2tUb3AsIHJlY2VudEtleXdvcmRUb3ApIDo6XG4gIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZVxuICBjb25zdCBsaW5lMCA9IHN0YXRlLmN1ckxpbmVcbiAgY29uc3QgZmlyc3QgPSB0aGlzLm9mZnNpZGVfbGluZXNbbGluZTBdXG5cbiAgbGV0IGluZGVudCwga2V5d29yZE5lc3RlZEluZGVudFxuICBpZiByZWNlbnRLZXl3b3JkVG9wIDo6XG4gICAgaW5kZW50ID0gcmVjZW50S2V5d29yZFRvcC5maXJzdC5pbmRlbnRcbiAgZWxzZSBpZiBvcC5uZXN0SW5uZXIgJiYgc3RhY2tUb3AgJiYgbGluZTAgPT09IHN0YWNrVG9wLmZpcnN0LmxpbmUgOjpcbiAgICBpbmRlbnQgPSBzdGFja1RvcC5pbm5lckluZGVudFxuICBlbHNlIGlmIG9wLmluS2V5d29yZEFyZyA6OlxuICAgIGluZGVudCA9IGZpcnN0LmluZGVudFxuICAgIGNvbnN0IGluZGVudF9ibG9jayA9IHRoaXMub2Zmc2lkZUluZGVudChsaW5lMCwgaW5kZW50KVxuICAgIGNvbnN0IGluZGVudF9rZXl3b3JkID0gdGhpcy5vZmZzaWRlSW5kZW50KGxpbmUwLCBpbmRlbnRfYmxvY2suaW5uZXJJbmRlbnQpXG4gICAgaWYgaW5kZW50X2tleXdvcmQuaW5uZXJJbmRlbnQgPiBpbmRlbnRfYmxvY2suaW5uZXJJbmRlbnQgOjpcbiAgICAgIC8vIGF1dG9kZXRlY3Qga2V5d29yZCBhcmd1bWVudCB1c2luZyAnQCcgZm9yIGZ1bmN0aW9uIGNhbGxzXG4gICAgICBpbmRlbnQgPSBpbmRlbnRfYmxvY2suaW5uZXJJbmRlbnRcbiAgICAgIGtleXdvcmROZXN0ZWRJbmRlbnQgPSBpbmRlbnRfa2V5d29yZC5pbm5lckluZGVudFxuICBlbHNlIDo6XG4gICAgaW5kZW50ID0gZmlyc3QuaW5kZW50XG5cbiAgbGV0IHtsYXN0LCBpbm5lckluZGVudH0gPSB0aGlzLm9mZnNpZGVJbmRlbnQobGluZTAsIGluZGVudCwga2V5d29yZE5lc3RlZEluZGVudClcblxuICAvLyBjYXAgdG8gXG4gIGlubmVySW5kZW50ID0gZmlyc3QuaW5kZW50ID4gaW5uZXJJbmRlbnRcbiAgICA/IGZpcnN0LmluZGVudCA6IGlubmVySW5kZW50XG5cbiAgaWYgc3RhY2tUb3AgJiYgc3RhY2tUb3AubGFzdC5wb3NMYXN0Q29udGVudCA8IGxhc3QucG9zTGFzdENvbnRlbnQ6OlxuICAgIC8vIEZpeHVwIGVuY2xvc2luZyBzY29wZXMuIEhhcHBlbnMgaW4gc2l0dWF0aW9ucyBsaWtlOiBgc2VydmVyLm9uIEAgd3JhcGVyIEAgKC4uLmFyZ3MpID0+IDo6YFxuICAgIGNvbnN0IHN0YWNrID0gc3RhdGUub2Zmc2lkZVxuICAgIGZvciBsZXQgaWR4ID0gc3RhY2subGVuZ3RoLTE7IGlkeD4wOyBpZHgtLSA6OlxuICAgICAgbGV0IHRpcCA9IHN0YWNrW2lkeF1cbiAgICAgIGlmIHRpcC5sYXN0LnBvc0xhc3RDb250ZW50ID49IGxhc3QucG9zTGFzdENvbnRlbnQgOjogYnJlYWtcbiAgICAgIHRpcC5sYXN0ID0gbGFzdFxuXG4gIHJldHVybiBAe30gb3AsIGlubmVySW5kZW50LCBmaXJzdCwgbGFzdFxuICAgICwgc3RhcnQ6IHN0YXRlLnN0YXJ0LCBlbmQ6IHN0YXRlLmVuZFxuICAgICwgbG9jOiBAe30gc3RhcnQ6IHN0YXRlLnN0YXJ0TG9jLCBlbmQ6IHN0YXRlLmVuZExvY1xuXG5cblxucHAuZmluaXNoT2Zmc2lkZU9wID0gZnVuY3Rpb24gKG9wLCBleHRyYUNoYXJzKSA6OlxuICBjb25zdCBzdGFjayA9IHRoaXMuc3RhdGUub2Zmc2lkZVxuICBsZXQgc3RhY2tUb3AgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXVxuICBsZXQgcmVjZW50S2V5d29yZFRvcFxuICBpZiBvcC5jb2RlQmxvY2sgOjpcbiAgICBpZiBzdGFja1RvcCAmJiBzdGFja1RvcC5pbktleXdvcmRBcmcgOjpcbiAgICAgIC8vIFdlJ3JlIGF0IHRoZSBlbmQgb2YgYW4gb2Zmc2lkZSBrZXl3b3JkIGJsb2NrOyByZXN0b3JlIGVuY2xvc2luZyAoKVxuICAgICAgdGhpcy5wb3BPZmZzaWRlKClcbiAgICAgIHRoaXMuc3RhdGUub2Zmc2lkZU5leHRPcCA9IG9wXG4gICAgICB0aGlzLnN0YXRlLm9mZnNpZGVSZWNlbnRUb3AgPSBzdGFja1RvcFxuICAgICAgcmV0dXJuXG5cbiAgICByZWNlbnRLZXl3b3JkVG9wID0gdGhpcy5zdGF0ZS5vZmZzaWRlUmVjZW50VG9wXG4gICAgdGhpcy5zdGF0ZS5vZmZzaWRlUmVjZW50VG9wID0gbnVsbFxuXG4gIGlmIGV4dHJhQ2hhcnMgOjpcbiAgICB0aGlzLnN0YXRlLnBvcyArPSBleHRyYUNoYXJzXG5cbiAgdGhpcy5fYmFzZV9maW5pc2hUb2tlbihvcC50b2tlblByZSlcblxuICBpZiB0aGlzLmlzTG9va2FoZWFkIDo6IHJldHVyblxuXG4gIHN0YWNrVG9wID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV1cbiAgY29uc3QgYmxrID0gdGhpcy5vZmZzaWRlQmxvY2sob3AsIHN0YWNrVG9wLCByZWNlbnRLZXl3b3JkVG9wKVxuICBibGsuaW5LZXl3b3JkQXJnID0gb3AuaW5LZXl3b3JkQXJnIHx8IHN0YWNrVG9wICYmIHN0YWNrVG9wLmluS2V5d29yZEFyZ1xuICB0aGlzLnN0YXRlLm9mZnNpZGUucHVzaChibGspXG5cblxucHAuX2Jhc2Vfc2tpcFNwYWNlID0gYmFzZVByb3RvLnNraXBTcGFjZVxucHAuc2tpcFNwYWNlID0gZnVuY3Rpb24oKSA6OlxuICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGVcbiAgaWYgbnVsbCAhPT0gc3RhdGUub2Zmc2lkZU5leHRPcCA6OiByZXR1cm5cblxuICBjb25zdCBzdGFjayA9IHN0YXRlLm9mZnNpZGVcbiAgbGV0IHN0YWNrVG9wXG4gIGlmIHN0YWNrICYmIHN0YWNrLmxlbmd0aCA6OlxuICAgIHN0YWNrVG9wID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdXG4gICAgc3RhdGUub2Zmc2lkZVBvcyA9IHN0YWNrVG9wLmxhc3QucG9zTGFzdENvbnRlbnRcbiAgZWxzZSA6OiBzdGF0ZS5vZmZzaWRlUG9zID0gLTFcblxuICB0cnkgOjpcbiAgICB0aGlzLl9iYXNlX3NraXBTcGFjZSgpXG4gICAgc3RhdGUub2Zmc2lkZVBvcyA9IC0xXG5cbiAgICBzdGF0ZS5vZmZzaWRlSW1wbGljaXRDb21tYSA9IHVuZGVmaW5lZCAhPT0gc3RhY2tUb3BcbiAgICAgID8gdGhpcy5vZmZzaWRlQ2hlY2tJbXBsaWNpdENvbW1hKHN0YWNrVG9wKVxuICAgICAgOiBudWxsXG4gIGNhdGNoIGVyciA6OlxuICAgIGlmIGVyciAhPT0gb2Zmc2lkZUJyZWFrb3V0IDo6IHRocm93IGVyclxuXG5cbmNvbnN0IHR0X29mZnNpZGVfZGlzcnVwdF9pbXBsaWNpdF9jb21tYSA9IG5ldyBTZXQgQCNcbiAgdHQuY29tbWEsIHR0LmRvdCwgdHQuYXJyb3dcblxucHAub2Zmc2lkZUNoZWNrSW1wbGljaXRDb21tYSA9IGZ1bmN0aW9uKHN0YWNrVG9wKSA6OlxuICBpZiAhIHN0YWNrVG9wLm9wLmltcGxpY2l0Q29tbWFzIHx8ICEgdGhpcy5vZmZzaWRlUGx1Z2luT3B0cy5pbXBsaWNpdF9jb21tYXMgOjpcbiAgICByZXR1cm4gbnVsbCAvLyBub3QgZW5hYmxlZCBmb3IgdGhpcyBvZmZzaWRlIG9wXG5cbiAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlLCBzdGF0ZV90eXBlPXN0YXRlLnR5cGUsIGNvbHVtbiA9IHN0YXRlLnBvcyAtIHN0YXRlLmxpbmVTdGFydFxuICBpZiBjb2x1bW4gIT09IHN0YWNrVG9wLmlubmVySW5kZW50Lmxlbmd0aCA6OlxuICAgIHJldHVybiBudWxsIC8vIG5vdCBhdCB0aGUgZXhhY3QgcmlnaHQgaW5kZW50XG4gIGlmIHN0YWNrVG9wLmVuZCA+PSBzdGF0ZS5lbmQgOjpcbiAgICByZXR1cm4gZmFsc2UgLy8gbm8gY29tbWEgYmVmb3JlIHRoZSBmaXJzdCBlbGVtZW50XG4gIGlmIHR0LmNvbW1hID09PSBzdGF0ZV90eXBlIDo6XG4gICAgcmV0dXJuIGZhbHNlIC8vIHRoZXJlJ3MgYW4gZXhwbGljaXQgY29tbWEgYWxyZWFkeSBwcmVzZW50XG4gIGlmIHN0YXRlX3R5cGUuYmlub3AgfHwgc3RhdGVfdHlwZS5iZWZvcmVFeHByIDo6XG4gICAgcmV0dXJuIGZhbHNlIC8vIHRoZXJlJ3MgYW4gb3BlcmF0b3Igb3IgYXJyb3cgZnVuY3Rpb24gcHJlY2VlZGluZyB0aGlzIGxpbmVcblxuICBpZiB0aGlzLmlzTG9va2FoZWFkIDo6IHJldHVybiBmYWxzZSAvLyBkaXNhbGxvdyByZWN1cnNpdmUgbG9va2FoZWFkXG4gIGNvbnN0IHt0eXBlOiBuZXh0X3R5cGV9ID0gdGhpcy5sb29rYWhlYWQoKVxuICBpZiB0dF9vZmZzaWRlX2Rpc3J1cHRfaW1wbGljaXRfY29tbWEuaGFzKG5leHRfdHlwZSkgfHwgbmV4dF90eXBlLmJpbm9wIDo6XG4gICAgcmV0dXJuIGZhbHNlIC8vIHRoZXJlJ3MgYSBjb21tYSwgZG90LCBvcGVyYXRvciwgb3Igb3RoZXIgdG9rZW4gdGhhdCBwcmVjbHVkZXMgYW4gaW1wbGljaXQgbGVhZGluZyBjb21tYVxuXG4gIHJldHVybiB0cnVlIC8vIGFuIGltcGxpY2l0IGNvbW1hIGlzIG5lZWRlZFxuXG5wcC5fYmFzZV9yZWFkVG9rZW4gPSBiYXNlUHJvdG8ucmVhZFRva2VuXG5wcC5yZWFkVG9rZW4gPSBmdW5jdGlvbihjb2RlKSA6OlxuICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGVcblxuICBpZiBzdGF0ZS5vZmZzaWRlSW1wbGljaXRDb21tYSA6OlxuICAgIHJldHVybiB0aGlzLl9iYXNlX2ZpbmlzaFRva2VuKHR0LmNvbW1hKVxuXG4gIGNvbnN0IG9mZnNpZGVOZXh0T3AgPSBzdGF0ZS5vZmZzaWRlTmV4dE9wXG4gIGlmIG51bGwgIT09IG9mZnNpZGVOZXh0T3AgOjpcbiAgICBzdGF0ZS5vZmZzaWRlTmV4dE9wID0gbnVsbFxuICAgIHJldHVybiB0aGlzLmZpbmlzaE9mZnNpZGVPcChvZmZzaWRlTmV4dE9wKVxuXG4gIGlmIHN0YXRlLnBvcyA9PT0gc3RhdGUub2Zmc2lkZVBvcyA6OlxuICAgIHJldHVybiB0aGlzLnBvcE9mZnNpZGUoKVxuXG4gIHJldHVybiB0aGlzLl9iYXNlX3JlYWRUb2tlbihjb2RlKVxuXG5wcC5wb3BPZmZzaWRlID0gZnVuY3Rpb24oKSA6OlxuICBjb25zdCBzdGFjayA9IHRoaXMuc3RhdGUub2Zmc2lkZVxuICBjb25zdCBzdGFja1RvcCA9IHRoaXMuaXNMb29rYWhlYWRcbiAgICA/IHN0YWNrW3N0YWNrLmxlbmd0aC0xXVxuICAgIDogc3RhY2sucG9wKClcbiAgdGhpcy5zdGF0ZS5vZmZzaWRlUG9zID0gLTFcblxuICB0aGlzLl9iYXNlX2ZpbmlzaFRva2VuKHN0YWNrVG9wLm9wLnRva2VuUG9zdClcbiAgcmV0dXJuIHN0YWNrVG9wXG4iXX0=