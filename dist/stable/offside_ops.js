'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.at_offside = undefined;
exports.parseOffsideIndexMap = parseOffsideIndexMap;

var _babylon = require('babylon');

var babylon = _interopRequireWildcard(_babylon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const tt = babylon.tokTypes;

const at_offside = exports.at_offside = {
  '::': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: false, codeBlock: true, implicitCommas: false },
  '::@': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: false, extraChars: 1, implicitCommas: false },
  '::()': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: false, extraChars: 2, implicitCommas: false },
  '::{}': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: false, extraChars: 2, implicitCommas: false },
  '::[]': { tokenPre: tt.bracketL, tokenPost: tt.bracketR, nestInner: false, extraChars: 2, implicitCommas: false },

  '@': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: true, keywordBlock: true, implicitCommas: true },
  '@:': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: true, extraChars: 1, nestOp: '::{}', implicitCommas: true },
  '@#': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: true, extraChars: 1, nestOp: '::[]', implicitCommas: true },
  '@()': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: true, extraChars: 2, implicitCommas: true },
  '@{}': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: true, extraChars: 2, implicitCommas: true },
  '@[]': { tokenPre: tt.bracketL, tokenPost: tt.bracketR, nestInner: true, extraChars: 2, implicitCommas: true

    // note:  no '@()' -- standardize to use single-char '@ ' instead
  }, keyword_args: { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: false, inKeywordArg: true, implicitCommas: false } };

Object.entries(at_offside).forEach(([name, opRec]) => Object.assign(opRec, { name }));

const rx_offside = /^([ \t]*)(.*)$/mg;
function parseOffsideIndexMap(input) {
  let lines = [null],
      posLastContent = 0,
      last = ['', 0];
  let idx_lastContent = 0;

  input.replace(rx_offside, (match, indent, content, pos) => {
    if (!content) {
      [indent, posLastContent] = last; // blank line; use last valid content as end
    } else {
        // valid content; set last to current indent
        posLastContent = pos + match.length;
        idx_lastContent = lines.length;
        last = [indent, posLastContent];
      }
    lines.push({ line: lines.length, posFirstContent: pos, posLastContent, indent, content });
    return '';
  });

  lines.splice(1 + idx_lastContent); // trim trailing whitespace
  return lines;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NvZGUvb2Zmc2lkZV9vcHMuanMiXSwibmFtZXMiOlsicGFyc2VPZmZzaWRlSW5kZXhNYXAiLCJiYWJ5bG9uIiwidHQiLCJ0b2tUeXBlcyIsImF0X29mZnNpZGUiLCJ0b2tlblByZSIsImJyYWNlTCIsInRva2VuUG9zdCIsImJyYWNlUiIsIm5lc3RJbm5lciIsImNvZGVCbG9jayIsImltcGxpY2l0Q29tbWFzIiwicGFyZW5MIiwicGFyZW5SIiwiZXh0cmFDaGFycyIsImJyYWNrZXRMIiwiYnJhY2tldFIiLCJrZXl3b3JkQmxvY2siLCJuZXN0T3AiLCJrZXl3b3JkX2FyZ3MiLCJpbktleXdvcmRBcmciLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsIm5hbWUiLCJvcFJlYyIsImFzc2lnbiIsInJ4X29mZnNpZGUiLCJpbnB1dCIsImxpbmVzIiwicG9zTGFzdENvbnRlbnQiLCJsYXN0IiwiaWR4X2xhc3RDb250ZW50IiwicmVwbGFjZSIsIm1hdGNoIiwiaW5kZW50IiwiY29udGVudCIsInBvcyIsImxlbmd0aCIsInB1c2giLCJsaW5lIiwicG9zRmlyc3RDb250ZW50Iiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUF3QmdCQSxvQixHQUFBQSxvQjs7QUF4QmhCOztJQUFZQyxPOzs7O0FBQ1osTUFBTUMsS0FBS0QsUUFBUUUsUUFBbkI7O0FBRU8sTUFBTUMsa0NBQWE7QUFDeEIsUUFBUSxFQUFJQyxVQUFVSCxHQUFHSSxNQUFqQixFQUF5QkMsV0FBV0wsR0FBR00sTUFBdkMsRUFBK0NDLFdBQVcsS0FBMUQsRUFBaUVDLFdBQVcsSUFBNUUsRUFBa0ZDLGdCQUFnQixLQUFsRyxFQURnQjtBQUV4QixTQUFRLEVBQUlOLFVBQVVILEdBQUdVLE1BQWpCLEVBQXlCTCxXQUFXTCxHQUFHVyxNQUF2QyxFQUErQ0osV0FBVyxLQUExRCxFQUFpRUssWUFBWSxDQUE3RSxFQUFnRkgsZ0JBQWdCLEtBQWhHLEVBRmdCO0FBR3hCLFVBQVEsRUFBSU4sVUFB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QUNBTiwwQkFBa0JILE1BQU1TLE1BQXhCO0FBQ0FQLGVBQU8sQ0FBQ0ksTUFBRCxFQUFTTCxjQUFULENBQVA7QUFBK0I7QUFDakNELFVBQU1VLElBQU4sQ0FBYSxFQUFDQyxNQUFNWCxNQUFNUyxNQUFiLEVBQXFCRyxpQkFBZ0JKLEdBQXJDLEVBQTBDUCxjQUExQyxFQUEwREssTUFBMUQsRUFBa0VDLE9BQWxFLEVBQWI7QUFDQSxXQUFPLEVBQVA7QUFBUyxHQVRYOztBQVdBUCxRQUFNYSxNQUFOLENBQWEsSUFBRVYsZUFBZixFQWYwQyxDQWVWO0FBQ2hDLFNBQU9ILEtBQVA7QUFBWSIsImZpbGUiOiJvZmZzaWRlX29wcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJhYnlsb24gZnJvbSAnYmFieWxvbidcbmNvbnN0IHR0ID0gYmFieWxvbi50b2tUeXBlc1xuXG5leHBvcnQgY29uc3QgYXRfb2Zmc2lkZSA9IEB7fVxuICAnOjonOiAgIEB7fSB0b2tlblByZTogdHQuYnJhY2VMLCB0b2tlblBvc3Q6IHR0LmJyYWNlUiwgbmVzdElubmVyOiBmYWxzZSwgY29kZUJsb2NrOiB0cnVlLCBpbXBsaWNpdENvbW1hczogZmFsc2UsXG4gICc6OkAnOiAgQHt9IHRva2VuUHJlOiB0dC5wYXJlbkwsIHRva2VuUG9zdDogdHQucGFyZW5SLCBuZXN0SW5uZXI6IGZhbHNlLCBleHRyYUNoYXJzOiAxLCBpbXBsaWNpdENvbW1hczogZmFsc2UsXG4gICc6OigpJzogQHt9IHRva2VuUHJlOiB0dC5wYXJlbkwsIHRva2VuUG9zdDogdHQucGFyZW5SLCBuZXN0SW5uZXI6IGZhbHNlLCBleHRyYUNoYXJzOiAyLCBpbXBsaWNpdENvbW1hczogZmFsc2UsXG4gICc6Ont9JzogQHt9IHRva2VuUHJlOiB0dC5icmFjZUwsIHRva2VuUG9zdDogdHQuYnJhY2VSLCBuZXN0SW5uZXI6IGZhbHNlLCBleHRyYUNoYXJzOiAyLCBpbXBsaWNpdENvbW1hczogZmFsc2UsXG4gICc6OltdJzogQHt9IHRva2VuUHJlOiB0dC5icmFja2V0TCwgdG9rZW5Qb3N0OiB0dC5icmFja2V0UiwgbmVzdElubmVyOiBmYWxzZSwgZXh0cmFDaGFyczogMiwgaW1wbGljaXRDb21tYXM6IGZhbHNlLFxuXG4gICdAJzogICAgQHt9IHRva2VuUHJlOiB0dC5wYXJlbkwsIHRva2VuUG9zdDogdHQucGFyZW5SLCBuZXN0SW5uZXI6IHRydWUsIGtleXdvcmRCbG9jazogdHJ1ZSwgaW1wbGljaXRDb21tYXM6IHRydWUsXG4gICdAOic6ICAgQHt9IHRva2VuUHJlOiB0dC5wYXJlbkwsIHRva2VuUG9zdDogdHQucGFyZW5SLCBuZXN0SW5uZXI6IHRydWUsIGV4dHJhQ2hhcnM6IDEsIG5lc3RPcDogJzo6e30nLCBpbXBsaWNpdENvbW1hczogdHJ1ZSxcbiAgJ0AjJzogICBAe30gdG9rZW5QcmU6IHR0LnBhcmVuTCwgdG9rZW5Qb3N0OiB0dC5wYXJlblIsIG5lc3RJbm5lcjogdHJ1ZSwgZXh0cmFDaGFyczogMSwgbmVzdE9wOiAnOjpbXScsIGltcGxpY2l0Q29tbWFzOiB0cnVlLFxuICAnQCgpJzogIEB7fSB0b2tlblByZTogdHQuYnJhY2VMLCB0b2tlblBvc3Q6IHR0LmJyYWNlUiwgbmVzdElubmVyOiB0cnVlLCBleHRyYUNoYXJzOiAyLCBpbXBsaWNpdENvbW1hczogdHJ1ZSxcbiAgJ0B7fSc6ICBAe30gdG9rZW5QcmU6IHR0LmJyYWNlTCwgdG9rZW5Qb3N0OiB0dC5icmFjZVIsIG5lc3RJbm5lcjogdHJ1ZSwgZXh0cmFDaGFyczogMiwgaW1wbGljaXRDb21tYXM6IHRydWUsXG4gICdAW10nOiAgQHt9IHRva2VuUHJlOiB0dC5icmFja2V0TCwgdG9rZW5Qb3N0OiB0dC5icmFja2V0UiwgbmVzdElubmVyOiB0cnVlLCBleHRyYUNoYXJzOiAyLCBpbXBsaWNpdENvbW1hczogdHJ1ZSxcblxuICAvLyBub3RlOiAgbm8gJ0AoKScgLS0gc3RhbmRhcmRpemUgdG8gdXNlIHNpbmdsZS1jaGFyICdAICcgaW5zdGVhZFxuICBrZXl3b3JkX2FyZ3M6IEB7fSB0b2tlblByZTogdHQucGFyZW5MLCB0b2tlblBvc3Q6IHR0LnBhcmVuUiwgbmVzdElubmVyOiBmYWxzZSwgaW5LZXl3b3JkQXJnOiB0cnVlLCBpbXBsaWNpdENvbW1hczogZmFsc2UsXG5cbk9iamVjdC5lbnRyaWVzKGF0X29mZnNpZGUpLmZvckVhY2ggQCAoW25hbWUsIG9wUmVjXSkgPT5cbiAgT2JqZWN0LmFzc2lnbiBAIG9wUmVjLCBAOiBuYW1lXG5cbmNvbnN0IHJ4X29mZnNpZGUgPSAvXihbIFxcdF0qKSguKikkL21nXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VPZmZzaWRlSW5kZXhNYXAoaW5wdXQpIDo6XG4gIGxldCBsaW5lcyA9IFtudWxsXSwgcG9zTGFzdENvbnRlbnQ9MCwgbGFzdD1bJycsIDBdXG4gIGxldCBpZHhfbGFzdENvbnRlbnQ9MFxuXG4gIGlucHV0LnJlcGxhY2UgQCByeF9vZmZzaWRlLCAobWF0Y2gsIGluZGVudCwgY29udGVudCwgcG9zKSA9PiA6OlxuICAgIGlmICEgY29udGVudCA6OlxuICAgICAgW2luZGVudCwgcG9zTGFzdENvbnRlbnRdID0gbGFzdCAvLyBibGFuayBsaW5lOyB1c2UgbGFzdCB2YWxpZCBjb250ZW50IGFzIGVuZFxuICAgIGVsc2UgOjpcbiAgICAgIC8vIHZhbGlkIGNvbnRlbnQ7IHNldCBsYXN0IHRvIGN1cnJlbnQgaW5kZW50XG4gICAgICBwb3NMYXN0Q29udGVudCA9IHBvcyArIG1hdGNoLmxlbmd0aFxuICAgICAgaWR4X2xhc3RDb250ZW50ID0gbGluZXMubGVuZ3RoXG4gICAgICBsYXN0ID0gW2luZGVudCwgcG9zTGFzdENvbnRlbnRdXG4gICAgbGluZXMucHVzaCBAOiBsaW5lOiBsaW5lcy5sZW5ndGgsIHBvc0ZpcnN0Q29udGVudDpwb3MsIHBvc0xhc3RDb250ZW50LCBpbmRlbnQsIGNvbnRlbnRcbiAgICByZXR1cm4gJydcblxuICBsaW5lcy5zcGxpY2UoMStpZHhfbGFzdENvbnRlbnQpIC8vIHRyaW0gdHJhaWxpbmcgd2hpdGVzcGFjZVxuICByZXR1cm4gbGluZXNcblxuIl19