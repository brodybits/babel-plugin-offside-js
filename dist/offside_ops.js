'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.at_offside = undefined;
exports.parseOffsideIndexMap = parseOffsideIndexMap;

var _babylon = require('babylon');

var babylon = _interopRequireWildcard(_babylon);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const tt = babylon.tokTypes;

const at_offside = exports.at_offside = {
  '::': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: false, codeBlock: true, implicitCommas: false }, '::@': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: false, extraChars: 1, implicitCommas: false }, '::()': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: false, extraChars: 2, implicitCommas: false }, '::{}': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: false, extraChars: 2, implicitCommas: false }, '::[]': { tokenPre: tt.bracketL, tokenPost: tt.bracketR, nestInner: false, extraChars: 2, implicitCommas: false }, '@': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: true, keywordBlock: true, implicitCommas: true }, '@:': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: true, extraChars: 1, nestOp: '::{}', implicitCommas: true }, '@#': { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: true, extraChars: 1, nestOp: '::[]', implicitCommas: true }, '@()': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: true, extraChars: 2, implicitCommas: true }, '@{}': { tokenPre: tt.braceL, tokenPost: tt.braceR, nestInner: true, extraChars: 2, implicitCommas: true }, '@[]': { tokenPre: tt.bracketL, tokenPost: tt.bracketR, nestInner: true, extraChars: 2, implicitCommas: true

    // note:  no '@()' -- standardize to use single-char '@ ' instead
  }, keyword_args: { tokenPre: tt.parenL, tokenPost: tt.parenR, nestInner: false, inKeywordArg: true, implicitCommas: false } };

Object.entries(at_offside).forEach(([name, opRec]) => Object.assign(opRec, { name }));

const rx_offside = /^([ \t]*)(.*)$/mg;
function parseOffsideIndexMap(input) {
  let lines = [null],
      posLastContent = 0,
      last = ['', 0];
  let idx_lastContent = 0;

  input.replace(rx_offside, (match, indent, content, pos) => {
    if (!content) {
      [indent, posLastContent] = last; // blank line; use last valid content as end
    } else {
        // valid content; set last to current indent
        posLastContent = pos + match.length;
        idx_lastContent = lines.length;
        last = [indent, posLastContent];
      }
    lines.push({ line: lines.length, posFirstContent: pos, posLastContent, indent, content });
    return '';
  });

  lines.splice(1 + idx_lastContent); // trim trailing whitespace
  return lines;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2NvZGUvb2Zmc2lkZV9vcHMuanMiXSwibmFtZXMiOlsicGFyc2VPZmZzaWRlSW5kZXhNYXAiLCJiYWJ5bG9uIiwidHQiLCJ0b2tUeXBlcyIsImF0X29mZnNpZGUiLCJ0b2tlblByZSIsImJyYWNlTCIsInRva2VuUG9zdCIsImJyYWNlUiIsIm5lc3RJbm5lciIsImNvZGVCbG9jayIsImltcGxpY2l0Q29tbWFzIiwicGFyZW5MIiwicGFyZW5SIiwiZXh0cmFDaGFycyIsImJyYWNrZXRMIiwiYnJhY2tldFIiLCJrZXl3b3JkQmxvY2siLCJuZXN0T3AiLCJrZXl3b3JkX2FyZ3MiLCJpbktleXdvcmRBcmciLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsIm5hbWUiLCJvcFJlYyIsImFzc2lnbiIsInJ4X29mZnNpZGUiLCJpbnB1dCIsImxpbmVzIiwicG9zTGFzdENvbnRlbnQiLCJsYXN0IiwiaWR4X2xhc3RDb250ZW50IiwicmVwbGFjZSIsIm1hdGNoIiwiaW5kZW50IiwiY29udGVudCIsInBvcyIsImxlbmd0aCIsInB1c2giLCJsaW5lIiwicG9zRmlyc3RDb250ZW50Iiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUF3QmdCQSxvQixHQUFBQSxvQjs7QUF4QmhCOztJQUFZQyxPOzs7O0FBQ1osTUFBTUMsS0FBS0QsUUFBUUUsUUFBbkI7O0FBRU8sTUFBTUMsa0NBQWE7QUFDcEIsUUFBUSxFQUFJQyxVQUFVSCxHQUFHSSxNQUFqQixFQUF5QkMsV0FBV0wsR0FBR00sTUFBdkMsRUFBK0NDLFdBQVcsS0FBMUQsRUFBaUVDLFdBQVcsSUFBNUUsRUFBa0ZDLGdCQUFnQixLQUFsRyxFQURZLEVBRXBCLE9BQVEsRUFBSU4sVUFBVUgsR0FBR1UsTUFBakIsRUFBeUJMLFdBQVdMLEdBQUdXLE1BQXZDLEVBQStDSixXQUFXLEtBQTFELEVBQWlFSyxZQUFZLENBQTdFLEVBQWdGSCxnQkFBZ0IsS0FBaEcsRUFGWSxFQUdwQixRQUFRLEVBQUlOLFVBQVVILEdB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QU1TLE1BQXhCO0FBQ0FQLGVBQU8sQ0FBQ0ksTUFBRCxFQUFTTCxjQUFULENBQVA7QUFBK0I7QUFDakNELFVBQU1VLElBQU4sQ0FBYSxFQUFDQyxNQUFNWCxNQUFNUyxNQUFiLEVBQXFCRyxpQkFBZ0JKLEdBQXJDLEVBQTBDUCxjQUExQyxFQUEwREssTUFBMUQsRUFBa0VDLE9BQWxFLEVBQWI7QUFDQSxXQUFPLEVBQVA7QUFBUyxHQVRYOztBQVdBUCxRQUFNYSxNQUFOLENBQWEsSUFBRVYsZUFBZixFQWYwQyxDQWVWO0FBQ2hDLFNBQU9ILEtBQVA7QUFBWSIsImZpbGUiOiJvZmZzaWRlX29wcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJhYnlsb24gZnJvbSAnYmFieWxvbidcbmNvbnN0IHR0ID0gYmFieWxvbi50b2tUeXBlc1xuXG5leHBvcnQgY29uc3QgYXRfb2Zmc2lkZSA9IEB7fVxuICAgICAgJzo6JzogICBAe30gdG9rZW5QcmU6IHR0LmJyYWNlTCwgdG9rZW5Qb3N0OiB0dC5icmFjZVIsIG5lc3RJbm5lcjogZmFsc2UsIGNvZGVCbG9jazogdHJ1ZSwgaW1wbGljaXRDb21tYXM6IGZhbHNlLFxuICAgICwgJzo6QCc6ICBAe30gdG9rZW5QcmU6IHR0LnBhcmVuTCwgdG9rZW5Qb3N0OiB0dC5wYXJlblIsIG5lc3RJbm5lcjogZmFsc2UsIGV4dHJhQ2hhcnM6IDEsIGltcGxpY2l0Q29tbWFzOiBmYWxzZSxcbiAgICAsICc6OigpJzogQHt9IHRva2VuUHJlOiB0dC5wYXJlbkwsIHRva2VuUG9zdDogdHQucGFyZW5SLCBuZXN0SW5uZXI6IGZhbHNlLCBleHRyYUNoYXJzOiAyLCBpbXBsaWNpdENvbW1hczogZmFsc2UsXG4gICAgLCAnOjp7fSc6IEB7fSB0b2tlblByZTogdHQuYnJhY2VMLCB0b2tlblBvc3Q6IHR0LmJyYWNlUiwgbmVzdElubmVyOiBmYWxzZSwgZXh0cmFDaGFyczogMiwgaW1wbGljaXRDb21tYXM6IGZhbHNlLFxuICAgICwgJzo6W10nOiBAe30gdG9rZW5QcmU6IHR0LmJyYWNrZXRMLCB0b2tlblBvc3Q6IHR0LmJyYWNrZXRSLCBuZXN0SW5uZXI6IGZhbHNlLCBleHRyYUNoYXJzOiAyLCBpbXBsaWNpdENvbW1hczogZmFsc2UsXG5cbiAgICAsICdAJzogICAgQHt9IHRva2VuUHJlOiB0dC5wYXJlbkwsIHRva2VuUG9zdDogdHQucGFyZW5SLCBuZXN0SW5uZXI6IHRydWUsIGtleXdvcmRCbG9jazogdHJ1ZSwgaW1wbGljaXRDb21tYXM6IHRydWUsXG4gICAgLCAnQDonOiAgIEB7fSB0b2tlblByZTogdHQucGFyZW5MLCB0b2tlblBvc3Q6IHR0LnBhcmVuUiwgbmVzdElubmVyOiB0cnVlLCBleHRyYUNoYXJzOiAxLCBuZXN0T3A6ICc6Ont9JywgaW1wbGljaXRDb21tYXM6IHRydWUsXG4gICAgLCAnQCMnOiAgIEB7fSB0b2tlblByZTogdHQucGFyZW5MLCB0b2tlblBvc3Q6IHR0LnBhcmVuUiwgbmVzdElubmVyOiB0cnVlLCBleHRyYUNoYXJzOiAxLCBuZXN0T3A6ICc6OltdJywgaW1wbGljaXRDb21tYXM6IHRydWUsXG4gICAgLCAnQCgpJzogIEB7fSB0b2tlblByZTogdHQuYnJhY2VMLCB0b2tlblBvc3Q6IHR0LmJyYWNlUiwgbmVzdElubmVyOiB0cnVlLCBleHRyYUNoYXJzOiAyLCBpbXBsaWNpdENvbW1hczogdHJ1ZSxcbiAgICAsICdAe30nOiAgQHt9IHRva2VuUHJlOiB0dC5icmFjZUwsIHRva2VuUG9zdDogdHQuYnJhY2VSLCBuZXN0SW5uZXI6IHRydWUsIGV4dHJhQ2hhcnM6IDIsIGltcGxpY2l0Q29tbWFzOiB0cnVlLFxuICAgICwgJ0BbXSc6ICBAe30gdG9rZW5QcmU6IHR0LmJyYWNrZXRMLCB0b2tlblBvc3Q6IHR0LmJyYWNrZXRSLCBuZXN0SW5uZXI6IHRydWUsIGV4dHJhQ2hhcnM6IDIsIGltcGxpY2l0Q29tbWFzOiB0cnVlLFxuXG4gICAgLy8gbm90ZTogIG5vICdAKCknIC0tIHN0YW5kYXJkaXplIHRvIHVzZSBzaW5nbGUtY2hhciAnQCAnIGluc3RlYWRcbiAgICAsIGtleXdvcmRfYXJnczogQHt9IHRva2VuUHJlOiB0dC5wYXJlbkwsIHRva2VuUG9zdDogdHQucGFyZW5SLCBuZXN0SW5uZXI6IGZhbHNlLCBpbktleXdvcmRBcmc6IHRydWUsIGltcGxpY2l0Q29tbWFzOiBmYWxzZSxcblxuT2JqZWN0LmVudHJpZXMoYXRfb2Zmc2lkZSkuZm9yRWFjaCBAIChbbmFtZSwgb3BSZWNdKSA9PlxuICBPYmplY3QuYXNzaWduIEAgb3BSZWMsIEA6IG5hbWVcblxuY29uc3Qgcnhfb2Zmc2lkZSA9IC9eKFsgXFx0XSopKC4qKSQvbWdcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU9mZnNpZGVJbmRleE1hcChpbnB1dCkgOjpcbiAgbGV0IGxpbmVzID0gW251bGxdLCBwb3NMYXN0Q29udGVudD0wLCBsYXN0PVsnJywgMF1cbiAgbGV0IGlkeF9sYXN0Q29udGVudD0wXG5cbiAgaW5wdXQucmVwbGFjZSBAIHJ4X29mZnNpZGUsIChtYXRjaCwgaW5kZW50LCBjb250ZW50LCBwb3MpID0+IDo6XG4gICAgaWYgISBjb250ZW50IDo6XG4gICAgICBbaW5kZW50LCBwb3NMYXN0Q29udGVudF0gPSBsYXN0IC8vIGJsYW5rIGxpbmU7IHVzZSBsYXN0IHZhbGlkIGNvbnRlbnQgYXMgZW5kXG4gICAgZWxzZSA6OlxuICAgICAgLy8gdmFsaWQgY29udGVudDsgc2V0IGxhc3QgdG8gY3VycmVudCBpbmRlbnRcbiAgICAgIHBvc0xhc3RDb250ZW50ID0gcG9zICsgbWF0Y2gubGVuZ3RoXG4gICAgICBpZHhfbGFzdENvbnRlbnQgPSBsaW5lcy5sZW5ndGhcbiAgICAgIGxhc3QgPSBbaW5kZW50LCBwb3NMYXN0Q29udGVudF1cbiAgICBsaW5lcy5wdXNoIEA6IGxpbmU6IGxpbmVzLmxlbmd0aCwgcG9zRmlyc3RDb250ZW50OnBvcywgcG9zTGFzdENvbnRlbnQsIGluZGVudCwgY29udGVudFxuICAgIHJldHVybiAnJ1xuXG4gIGxpbmVzLnNwbGljZSgxK2lkeF9sYXN0Q29udGVudCkgLy8gdHJpbSB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gIHJldHVybiBsaW5lc1xuXG4iXX0=